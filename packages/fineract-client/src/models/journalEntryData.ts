/**
 * Apache Fineract REST API
 * Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.
 *
 * The version of the OpenAPI document: 0.0.0-88635972
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CreditDebit } from './creditDebit';
import { CurrencyData } from './currencyData';
import { TransactionDetailData } from './transactionDetailData';
import { EnumOptionData } from './enumOptionData';


export interface JournalEntryData { 
    accountNumber?: string;
    amount?: number;
    bankNumber?: string;
    checkNumber?: string;
    comments?: string;
    createdByUserId?: number;
    createdByUserName?: string;
    createdDate?: string;
    credits?: Array<CreditDebit>;
    currency?: CurrencyData;
    currencyCode?: string;
    dateFormat?: string;
    debits?: Array<CreditDebit>;
    entityId?: number;
    entityType?: EnumOptionData;
    entryType?: EnumOptionData;
    glAccountCode?: string;
    glAccountId?: number;
    glAccountName?: string;
    glAccountType?: EnumOptionData;
    id?: number;
    locale?: string;
    manualEntry?: boolean;
    officeId?: number;
    officeName?: string;
    officeRunningBalance?: number;
    organizationRunningBalance?: number;
    paymentTypeId?: number;
    receiptNumber?: string;
    referenceNumber?: string;
    reversed?: boolean;
    routingCode?: string;
    rowIndex?: number;
    runningBalanceComputed?: boolean;
    savingTransactionId?: number;
    submittedOnDate?: string;
    transactionDate?: string;
    transactionDetails?: TransactionDetailData;
    transactionId?: string;
}

